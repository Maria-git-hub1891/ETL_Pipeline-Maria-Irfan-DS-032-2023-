
# Handle Missing Data
for df in [weather_df, historical_df, noaa_df, google_drive_df, mongo_df]:
    df.fillna(method="ffill", inplace=True)
    df.fillna(method="bfill", inplace=True)

# Convert Celsius to Fahrenheit where applicable
if not weather_df.empty and "current.temp_c" in weather_df.columns:
    weather_df["current.temp_f"] = (weather_df["current.temp_c"] * 9 / 5) + 32

if not historical_df.empty:
    historical_df["temperature_2m_max_f"] = (historical_df["temperature_2m_max"] * 9 / 5) + 32

if not google_drive_df.empty:
    google_drive_df["Temperature_F"] = (google_drive_df["Temperature"] * 9 / 5) + 32

# Standardize Date Formats
if not weather_df.empty and "location.localtime" in weather_df.columns:
    weather_df["date"] = pd.to_datetime(weather_df["location.localtime"]).dt.date

if not historical_df.empty:
    historical_df["date"] = pd.to_datetime(historical_df["time"]).dt.date

if not noaa_df.empty and "DATE" in noaa_df.columns:
    noaa_df["date"] = pd.to_datetime(noaa_df["DATE"]).dt.date

if not google_drive_df.empty:
    google_drive_df["date"] = pd.to_datetime(google_drive_df["date"], errors="coerce", utc=True).dt.date

# Remove Duplicates
for df in [weather_df, historical_df, noaa_df, google_drive_df, mongo_df]:
    df.drop_duplicates(inplace=True)

# Aggregate Data: Ensure One Record Per Date
def aggregate_daily(df, temp_column, new_column):
    if not df.empty:
        return df.groupby("date", as_index=False).agg({temp_column: "mean"}).rename(columns={temp_column: new_column})
    return pd.DataFrame()

historical_df = aggregate_daily(historical_df, "temperature_2m_max", "temperature_2m_max")
noaa_df = aggregate_daily(noaa_df, "HourlyDryBulbTemperature", "HourlyDryBulbTemperature")
google_drive_df = aggregate_daily(google_drive_df, "Temperature", "Temperature")

# Weather Condition Categorization
weather_mapping = {
    "Sunny": "Clear",
    "Partly cloudy": "Cloudy",
    "Cloudy": "Cloudy",
    "Overcast": "Cloudy",
    "Rain": "Precipitation",
    "Snow": "Precipitation",
    "Thunderstorm": "Severe Weather"
}

if not weather_df.empty and "current.condition.text" in weather_df.columns:
    weather_df["current.condition.text"] = weather_df["current.condition.text"].map(weather_mapping)

# Keep Only Relevant Columns
weather_df = weather_df[["date", "current.temp_c", "current.temp_f", "current.condition.text"]] if not weather_df.empty else pd.DataFrame()
historical_df = historical_df[["date", "temperature_2m_max"]] if not historical_df.empty else pd.DataFrame()
noaa_df = noaa_df[["date", "HourlyDryBulbTemperature"]] if not noaa_df.empty else pd.DataFrame()
google_drive_df = google_drive_df[["date", "Temperature"]] if not google_drive_df.empty else pd.DataFrame()

# Merge DataFrames
dfs = [weather_df, historical_df, noaa_df, google_drive_df]
final_df = pd.DataFrame()
for df in dfs:
    if not df.empty:
        final_df = df if final_df.empty else final_df.merge(df, on="date", how="outer")

# Drop Empty Columns
final_df.dropna(axis=1, how="all", inplace=True)

# Convert Date to String for MongoDB
final_df["date"] = final_df["date"].astype(str)

# Clean NaN Values
final_records = [{k: v for k, v in record.items() if pd.notna(v)} for record in final_df.to_dict(orient="records")]
